---
---
<aside>
    <form class="filter-form">
        <h3>Filtro</h3>
        <fieldset class="filter-fieldset-price">
            <label>
                Min Price
                <input id="min-price-input" type="number" name="min-price" value="0">
            </label>
            <label>
                Max Price
                <input id="max-price-input" type="number" name="max-price" value="999">
            </label>
        </fieldset>
        <label>
            Category
            <select id="category-selector" name="category" id="filter-category-select">
                <option value="all" selected>All</option>
                <option value="electronics">Electronics</option>
                <option value="jewelery">Jewelery</option>
                <option value="men's clothing">MenSClothing</option>
                <option value="women's clothing">WomenSClothing</option>
            </select>
        </label>
        <label>
            Number of stars
            <input type="number" name="rate" id="filter-rate-input" min="1" max="5" value="1">
        </label>
        <button id="filter-button">Filtrar</button>
    </form>
</aside>

<script>
    import { getDomElementOrThrow, setOnClickHandle } from "../client-ui-scripts/utils"
    import { filterCategory } from "../stores/filterCategory"
    import { filterStars } from "../stores/filterStars"
    import { filterPrice } from "../stores/price"
    import type { Category } from "../types/Product"

    const minPriceInput: HTMLInputElement = getDomElementOrThrow("#min-price-input")    
    const maxPriceInput: HTMLInputElement = getDomElementOrThrow("#max-price-input")
    const categorySelector: HTMLSelectElement = getDomElementOrThrow("#category-selector")
    const rateInput: HTMLInputElement = getDomElementOrThrow("#filter-rate-input")
    
    setOnClickHandle("#filter-button", (event) => {
        event.preventDefault()

        if (minPriceInput.value != "0" || maxPriceInput.value != "999") {
            filterPrice.set([Number(minPriceInput.value), Number(maxPriceInput.value)])
        }
        filterCategory.set(categorySelector.value != "all" ? categorySelector.value as Category : null)
        if (rateInput.value != "1") {
            filterStars.set(Number(rateInput.value))
        }
    })

    filterPrice.subscribe(value => {
        minPriceInput.value = value != null ? value[0].toString() : "0" 
        maxPriceInput.value = value != null ? value[1].toString() : "999" 
    })

    filterCategory.subscribe(value => {
        categorySelector.value = value != null ? value : "all" 
    })

    filterStars.subscribe(value => {
        rateInput.value = value != null ? value.toString() : "1"
    })
</script>

<style>
    aside {
        width: 20%;
    }

    .filter-form {
        padding: 1rem 1.5rem;
        display: flex;
        flex-direction: column;
        gap: .5rem;
        border: .1rem solid #c7e1e3;
    }


    .filter-form input,
    .filter-form select {
        margin: 0;
        padding-block: 0;
        padding-inline: 0;
        padding: .2rem;
    }

    .filter-form button {
		padding-block: 0;
		padding-inline: 0;
		padding: .5rem;
        border: none;
        border-radius: 1rem;
		background-color: #2c6166;
		cursor: pointer;
		font-size: 1em;
        color: #c7e1e3;
    }

    .filter-fieldset-price {
        border: none;
        display: flex;
        flex-direction: row;
        gap: .5rem;
        padding: 0;
    }

    .filter-fieldset-price label input {
        max-width: 60px;
    }



</style>